var http = require('http');
var sys  = require('sys');
var fs   = require('fs');

var blacklist = [];

fs.watchFile('./blacklist', function(c,p) { update_blacklist(); });

function update_blacklist() {
  sys.log("Updating blacklist.");
  blacklist = fs.readFileSync('./blacklist').split('\n')
        .filter(function(rx) { return rx.length })
        .map(function(rx) { return RegExp(rx) });
}

function checkBlacklist(){
    for (i in blacklist) {
      if (blacklist[i].test(request.url)) {
      sys.log("Denied: " + request.method + " " + request.url);
      response.end();
      return;
      }
    }
}

http.createServer(function(request, response) {
  
  sys.log(request.connection.remoteAddress + ": " + request.method + " " + request.url);
  
  request.headers.host = '';
  var options = {
    hostname: 'localhost',
    port: 8080,
    path: request.url,
    method: request.method,
    headers: request.headers
  };
  
  var proxy_request = http.request(options);
  console.log('################################');
  console.log(proxy_request);
  console.log('################################');
  
  proxy_request.addListener('response', function (proxy_response) {
  
  //proxy_response.setEncoding('utf8');
  proxy_response.addListener('data', function(chunk) {
    response.write(chunk, 'binary');
    sys.log('proxy_response.listener - wrote chunk');
  });
  
  proxy_response.addListener('end', function() {
    sys.log('proxy_response.listener - end');
    response.end();
  });
  
    proxy_response.addListener('error', function(error) {
      sys.log('request.listener - error: ' + error);
    });
  
  response.writeHead(proxy_response.statusCode, proxy_response.headers);
  });
  
  request.addListener('data', function(chunk) {
  proxy_request.write(chunk, 'binary');
  sys.log('request.listener - wrote chunk');
  });
  
  request.addListener('end', function() {
  sys.log('request.listener - end');
  proxy_request.end();
  });
  
  request.addListener('error', function(error) {
  sys.log('request.listener - error: ' + error);
  });
  
}).listen(8081);

update_blacklist();